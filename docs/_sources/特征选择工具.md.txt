# 特征选择工具

评分卡模块提供了一个特征选择工具`score_card_model.utils.discretization.share.discrete`,它可以为一列特征数据按百分位数分段提取整合为固定的几个离散标签

`discrete(x: np.ndarray, n: int=5)->np.ndarray`

其中x为输入的特征数组,n为分段数,输出的是一个与输入数据一样长度的分好分类标签的特征数组



# 特征分布观察工具

`score_card_model.feature_selection.distribution.Distribution`类提供了一个观察数据分布的工具,
可以设置一个分段数参数`segment`,在最大值和最小值之间均匀的分割为`segment`段,然后统计各个分段中的数据量,并可以画图直观呈现.

```python
d = Distribution(x,n=5)
# 获取分布区间和各个区间间的出现次数
d()
# 获取各个区间上的分布图
d.draw()
```


# 利用iv值区分特征效果

`score_card_model.feature_selection.weight_of_evidence.Woe`类可以用来计算一个特征矩阵
中各维特征的`information value`和`weight of evidence`,

woe计算公式:

```math
woe_i = log(\frac {\frac {Bad_i} {Bad_{total}}} {\frac {Good_i} {Good_{total}}})
```
iv计算公式:


```math
IV_i=({\frac {Bad_i}{Bad_{total}}}-{\frac{Good_i}{Good_{total}}})*woe_i

```
```math
IV = \sum_{k=0}^n IV_i
```

```python3
woe = Woe(X,tag,event=1, label=["a","b","c"],
             discrete=[(func,{arg1:x....})...])
# 计算woe
woe.woe
# 计算iv
woe.iv
# 同时计算
woe()
```
woe对象计算后会将结果保存在对象中,因此如果要重新计算需要重新实例化


## 扩展Woe类

Woe类的扩展主要是在对不同特征的分段处理上,通过传入一个函数`func(**args)`到`discrete`来实现

```
discrete = [....,(func,args),....]
```
要给第几位的特征分段就放在list中的第几位,如果`discrete`的值是一个由`func`和`args`组成的`tuple`,那么它将被用到特征矩阵的每一维特征上做分段.

这个分段函数需要输入一维的np数组,输出也是一维np数组
